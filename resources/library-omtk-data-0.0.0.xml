<Library xmlns="http://hl7.org/fhir" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhir ../../schema/library.xsd">
    <id value="omtk-data-0.0.0"/>
    <url value="http://fhir.org/guides/cdc/opioid-cds/Library/omtk-data-0.0.0"/>
    <identifier>
        <use value="official"/>
        <value value="OMTKData"/>
    </identifier>
    <version value="0.0.0"/>
    <name value="Library - OMTK Data Logic"/>
    <title value="OMTK Logic"/>
    <status value="active"/>
    <experimental value="true"/>
    <type>
        <coding>
            <system value="http://hl7.org/fhir/library-type"/>
            <code value="logic-library"/>
            <display value="Logic Library"/>
        </coding>
    </type>
    <date value="2017-05-05"/>
    <publisher value="Centers for Disease Control and Prevention (CDC)"/>
    <description value="Opioid Management Terminology Knowledge Base Logic for use in implementing CDC Opioid Prescribing Guidelines."/>
    <purpose value="This library acts as a pure CQL representation of the RxNav database."/>
    <usage value="This library is used to provide information about an opioid prescription necessary to offer opioid management guidance for a patient."/>
    <useContext>
        <code>
            <system value="http://hl7.org/fhir/usage-context-type"/>
            <code value="focus"/>
            <display value="Clinical Focus"/>
        </code>
        <valueCodeableConcept>
            <coding>
                <system value="http://snomed.info/sct"/>
                <code value="182888003"/>
                <display value="Medication requested (situation)"/>
            </coding>
        </valueCodeableConcept>
    </useContext>
    <useContext>
        <code>
            <system value="http://hl7.org/fhir/usage-context-type"/>
            <code value="focus"/>
            <display value="Clinical Focus"/>
        </code>
        <valueCodeableConcept>
            <coding>
                <system value="http://snomed.info/sct"/>
                <code value="82423001"/>
                <display value="Chronic pain (finding)"/>
            </coding>
        </valueCodeableConcept>
    </useContext>
    <jurisdiction>
        <coding>
            <system value="urn:iso:std:iso:3166"/>
            <code value="US"/>
            <display value="United States of America"/>
        </coding>
    </jurisdiction>
    <topic>
        <text value="Opioid Prescribing"/>
    </topic>
    <contributor>
        <type value="author" />
        <name value="Kensaku Kawamoto, MD, PhD, MHS"/>
    </contributor>
    <contributor>
        <type value="author" />
        <name value="Bryn Rhodes"/>
    </contributor>
    <contributor>
        <type value="author" />
        <name value="Floyd Eisenberg, MD, MPH"/>
    </contributor>
    <contributor>
        <type value="author" />
        <name value="Robert McClure, MD, MPH"/>
    </contributor>
    <copyright value="Â© CDC 2016+."/>
    <relatedArtifact>
        <type value="documentation"/>
        <display value="CDC guideline for prescribing opioids for chronic pain"/>
        <url value="https://www.cdc.gov/mmwr/volumes/65/rr/rr6501e1.htm?CDC_AA_refVal=https%3A%2F%2Fwww.cdc.gov%2Fmmwr%2Fvolumes%2F65%2Frr%2Frr6501e1er.htm"/>
    </relatedArtifact>
    <content>
      <contentType value="application/elm+xml"/>
      <data value=""/>
   </content>
</Library>
