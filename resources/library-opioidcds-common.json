{
  "resourceType": "Library",
  "id": "opioidcds-common",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">opioidcds-common</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>system: </b><span>http://terminology.hl7.org/CodeSystem/library-type</span><br/></span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">0.1.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr>  <!-- <th:block th:each=\"cont, iter : ${resource.contributor}\"> -->  <!-- <tr style=\"vertical-align: top;\"> -->  <!-- <th th:if=\"${iter.index == 0}\" th:rowspan=\"${iter.size}\"  scope=\"row\"><b>Contributor: </b></th> -->  <!-- <td style=\"padding-left: 25px; padding-right: 25px;\"> -->  <!-- <b><span th:narrative=\"${cont.type.toCode()}\"></span>: </b><span th:narrative=\"${cont.name}\"></span> -->  <!-- </td> -->  <!-- </tr> -->  <!-- </th:block> --><tr style=\"vertical-align: top;\"><th rowspan=\"2\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/fhirhelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/omtklogic</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"10\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-with-ambulatory-misuse-potential</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/benzodiazepines</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/naloxone</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-with-ambulatory-misuse-potential</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing-enum</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions-enum</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>ServiceRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p></div></td></tr>  <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDS_Common version '0.1.0'\n\nusing FHIR version '4.0.0'\n\ninclude FHIRHelpers version '4.0.0' called FHIRHelpers\ninclude OMTKLogic version '0.0.2' called OMTKLogic\n\ncodesystem \"LOINC\": 'http://loinc.org'\ncodesystem \"SNOMED\": 'http://snomed.info/sct'\ncodesystem \"Medication Request Category Codes\": 'http://terminology.hl7.org/CodeSystem/medicationrequest-category'\ncodesystem \"Condition Clinical Status Codes\": 'http://terminology.hl7.org/CodeSystem/condition-clinical'\n\n// Expression-based\nvalueset \"Opioids With Ambulatory Misuse Potential\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-with-ambulatory-misuse-potential'\nvalueset \"Extended Release Opioid with Ambulatory Abuse Potential\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/extended-release-opioid-with-ambulatory-abuse-potential'\nvalueset \"Buprenorphine and Methadone medications\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/buprenorphine-and-methadone-medications'\n\n// Enumerated-compose\nvalueset \"Limited Life Expectancy (findings)\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions-enum'\nvalueset \"Therapies Indicating End of Life Care\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care-enum'\nvalueset \"Conditions Likely Terminal for Opioid Prescribing\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing-enum'\nvalueset \"CDC Malignant Cancer Conditions\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/cdc-malignant-cancer-conditions-enum'\nvalueset \"Oncology Specialty Designations (NUCC)\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/oncology-specialty-designations-enum'\nvalueset \"Opioid Misuse Disorders\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-misuse-disorders-enum'\nvalueset \"Substance Misuse Behavioral Counseling\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/substance-misuse-behavioral-counseling-enum'\n// Harvested from VSAV - OID: 2.16.840.1.113883.3.464.1003.101.12.1001\nvalueset \"All Ambulatory Encounters\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/all-ambulatory-encounters'\n\n/* Existing sets for first six recs */\nvalueset \"Benzodiazepines\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/benzodiazepines'\nvalueset \"Illicit Drug Screening\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/illicit-drug-urine-screening'\nvalueset \"Naloxone\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/naloxone'\nvalueset \"Risk Assessment\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-abuse-assessment'\nvalueset \"Opioid Drug Screening\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-urine-screening'\nvalueset \"Substance Abuse\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/substance-abuse'\n// Harvested from VSAC - OID: 2.16.840.1.113762.1.4.1108.15\nvalueset \"Hospice Disposition\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-disposition'\nvalueset \"Hospice Finding Codes\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding'\nvalueset \"Hospice Procedure Codes\": 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure'\n\n// Recommendation #2\n// See the latest notes in the Definitions table for Rec 2 - needs to be specific Direct Reference Codes:\n//  Creation: Opioid treatment plan: LOINC 80764-4 Pain medicine plan of care note\n//  Edit/Review: Treatment Plan Edited or Reviewed: SNOMED Chronic pain control management (procedure) 408957008\nvalueset \"Pain Management Treatment Plan Review\": 'http://todo.com/pain-management-treatment-plan-review'\n\n/*\nOpioid treatment plan exists (a record artifact)\t #2      80764-4 Pain medicine Plan of care note\nOpioid treatment plan edited (a procedure)\t         #2      Chronic pain control management (procedure) SCTID: 408957008\nOpioid treatment plan reviewed (a procedure if to be an order, a finding if identifying it has occurred)\t#2 Chronic pain control management (procedure) SCTID: 408957008\nDocumented discussion of opioid harms and risks\t     #3      Counseling about opioid safety (procedure) 460831000124102\nDocumented discussion of opioid harms and risks\t     #3      Exclusion for rec #3 - Counseling about opioid safety not done (situation) SCTID: 460841000124107\nReview PDMP data procedure\t#9   Review of prescription drug monitoring program record (procedure) SCTID: 461621000124108\nPDMP data review done Situation (the finding/situation is documented)\t#9    Review of prescription drug monitoring program record done (situation) SCTID: 461651000124104\n*/\ncode \"Opioid treatment plan exists (a record artifact)\": '80764-4' from \"LOINC\" //Pain medicine Plan of care note\ncode \"Opioid treatment plan edited (a procedure)\": '408957008' from \"SNOMED\" //Chronic pain control management (procedure) SCTID: 408957008\ncode \"Opioid treatment plan reviewed (a procedure if to be an order, a finding if identifying it has occurred)\": '408957008' from \"SNOMED\" //Chronic pain control management (procedure) SCTID: 408957008\ncode \"Documented discussion of opioid harms and risks\": '460831000124102' from \"SNOMED\" //Counseling about opioid safety (procedure)\ncode \"Documented discussion of opioid harms and risks not done\": '460841000124107' from \"SNOMED\" //Counseling about opioid safety not done (situation)\ncode \"Review PDMP data procedure\": '461621000124108' from \"SNOMED\" //Review of prescription drug monitoring program record (procedure)\ncode \"PDMP data review done Situation (the finding/situation is documented)\": '461651000124104' from \"SNOMED\" //Review of prescription drug monitoring program record done (situation)\n\n\ncode \"Referral to Hospice\": '306205009' from \"SNOMED\"\ncode \"Outpatient\": 'outpatient' from \"Medication Request Category Codes\"\ncode \"Active Condition\": 'active' from \"Condition Clinical Status Codes\"\n\n// TODO: code \"Nonpharmacologic therapy and nonopioid pharmocologic\": 'TODO' from \"TODO\"\n\n// TODO: Capture process decisions for long-term opioid use\ndefine IsForChronicPain: true\n\ndefine \"Active Ambulatory Opioid Rx\":\n  \"Is Active Ambulatory Medication Request?\"(\n    [MedicationRequest: \"Opioids With Ambulatory Misuse Potential\"]\n  )\n\ndefine \"Active Ambulatory Benzodiazepine Rx\":\n  \"Is Active Ambulatory Medication Request?\"(\n    [MedicationRequest: \"Benzodiazepines\"]\n  )\n\ndefine \"Active Ambulatory Naloxone Rx\":\n  \"Is Active Ambulatory Medication Request?\"(\n    [MedicationRequest: \"Naloxone\"]\n  )\n\ndefine \"Ambulatory Opioid Rx\":\n  \"Is Ambulatory Medication Request?\"(\n    [MedicationRequest: \"Opioids With Ambulatory Misuse Potential\"]\n  )\n\ndefine function \"Is Active Ambulatory Medication Request?\" (value List&lt;MedicationRequest&gt;) returns List&lt;MedicationRequest&gt;:\n  value Rx\n    where Rx.status.value = 'active'\n      and exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ \"Outpatient\"\n      )\n\ndefine function \"Is Ambulatory Medication Request?\" (value List&lt;MedicationRequest&gt;) returns List&lt;MedicationRequest&gt;:\n  value Rx\n    where exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ \"Outpatient\"\n      )\n\ndefine \"End of Life Assessment\":\n    // 1. Conditions indicating end of life or with limited life expectancy\n    exists (\n      \"Conditions Indicating End of Life or With Limited Life Expectancy\"\n    )\n    // 2. Admitted/referred/discharged to hospice care\n    or exists (\n      \"Admitted/Referred/Discharged to Hospice Care\"\n    )\n    // 3. Medications indicating end of life\n    /* or exists (\n      \"Medications Indicating End of Life\"\n    ) */\n\ndefine \"Conditions Indicating End of Life or With Limited Life Expectancy\":\n  (\n    [Condition: \"Conditions Likely Terminal for Opioid Prescribing\"] C\n      where exists (\n        C.clinicalStatus.coding Coding\n          where FHIRHelpers.ToCode(Coding) ~ \"Active Condition\"\n      )\n  )\n  union\n  (\n    [Condition: code in \"Limited Life Expectancy (findings)\"] C\n      where exists (\n        C.clinicalStatus.coding Coding\n          where FHIRHelpers.ToCode(Coding) ~ \"Active Condition\"\n      )\n  )\n\ndefine \"Admitted/Referred/Discharged to Hospice Care\":\n  (\n    [Procedure: code in \"Hospice Procedure Codes\"] P\n      where P.status.value in { 'in-progress', 'completed' }\n  )\n  union\n  (\n    [ServiceRequest: code in \"Hospice Procedure Codes\"] E\n      where E.status.value in { 'planned', 'arrived', 'in-progress', 'finished', 'onleave' }\n  )\n  union\n  (\n    [Observation: code in \"Hospice Finding Codes\"] O\n      where not (O.status.value in { 'unknown', 'entered-in-error', 'cancelled' })\n  )\n  union\n  (\n    [Encounter] E\n      where\n        (\n          if E.hospitalization.dischargeDisposition.coding is null\n              or not exists (E.hospitalization.dischargeDisposition.coding)\n            then false\n          else E.hospitalization.dischargeDisposition in \"Hospice Disposition\"\n        )\n        and E.status.value in { 'planned', 'arrived', 'in-progress', 'finished', 'onleave' }\n  )\n\n/* define \"Medications Indicating End of Life\":\n  (\n    [MedicationAdministration: \"End Of Life Opioids\"] MA\n      where MA.status.value in { 'in-progress', 'on-hold', 'completed' }\n  )\n  union\n  (\n    [MedicationDispense: \"End Of Life Opioids\"] MD\n      where MD.status.value in { 'preparation', 'in-progress', 'on-hold', 'completed' }\n  )\n  union\n  (\n    [MedicationRequest: \"End Of Life Opioids\"] MR\n      where MR.status.value in { 'active', 'completed' }\n  )\n  union\n  (\n    [MedicationStatement: \"End Of Life Opioids\"] MS\n      where MS.status.value in { 'active', 'completed', 'intended' }\n  ) */\n\n\ndefine function Prescriptions(Orders List&lt;MedicationRequest&gt;):\n  Orders O\n    let\n      // NOTE: Assuming medication is specified as a CodeableConcept with a single RxNorm code\n      rxNormCode: ToCode(O.medication.coding[0]),\n      medicationName: OMTKLogic.GetMedicationName(rxNormCode),\n      // NOTE: Assuming a single dosage instruction element\n      dosageInstruction: O.dosageInstruction[0],\n      // NOTE: Assuming a single dose and rate element\n      doseAndRate: dosageInstruction.doseAndRate[0],\n      repeat: dosageInstruction.timing.repeat,\n      frequency: Coalesce(repeat.frequencyMax.value, repeat.frequency.value),\n      period: System.Quantity { value: repeat.period.value, unit: repeat.periodUnit.value },\n      doseDescription:\n        Coalesce(\n          // There should be a conversion from FHIR.SimpleQuantity to System.Quantity\n          if doseAndRate.dose is FHIR.Range\n            then ToString(ToQuantity(doseAndRate.dose.low))\n                          + '-' + ToString(ToQuantity(doseAndRate.dose.high))\n                          + doseAndRate.dose.high.unit.value\n            else ToString(ToQuantity(doseAndRate.dose)),\n            ''\n        ),\n      frequencyDescription:\n        ToString(dosageInstruction.timing.repeat.frequency.value) +\n          Coalesce(\n            '-' + ToString(dosageInstruction.timing.repeat.frequencyMax.value),\n            ''\n          )\n    return {\n      rxNormCode: rxNormCode,\n      isDraft: O.status.value = 'draft',\n      // NOTE: Assuming asNeeded is expressed as a boolean\n      isPRN: dosageInstruction.asNeeded.value,\n      prescription:\n        if dosageInstruction.text is not null then\n          medicationName + ' ' + dosageInstruction.text.value\n        else\n          // TODO: Shouldn't need the .value here on asNeededBoolean\n          medicationName + ' ' + doseDescription + ' q' + frequencyDescription + (if dosageInstruction.asNeeded.value then ' PRN' else ''),\n      // TODO: Shouldn't need the ToQuantity here...\n      dose: if doseAndRate.dose is FHIR.Range\n            then ToQuantity(doseAndRate.dose.high)\n            else ToQuantity(doseAndRate.dose),\n      dosesPerDay: Coalesce(OMTKLogic.ToDaily(frequency, period), 1.0)\n    }\n\ndefine function MME(prescriptions List&lt;MedicationRequest&gt;):\n  (Prescriptions(prescriptions)) P\n    let mme: SingletonFrom(OMTKLogic.CalculateMMEs({ { rxNormCode: P.rxNormCode, doseQuantity: P.dose, dosesPerDay: P.dosesPerDay } }))\n    return {\n      rxNormCode: P.rxNormCode,\n      isDraft: P.isDraft,\n      isPRN: P.isPRN,\n      prescription: P.prescription,\n      dailyDose: mme.dailyDoseDescription,\n      conversionFactor: mme.conversionFactor,\n      mme: mme.mme\n    }\n\ndefine function TotalMME(prescriptions List&lt;MedicationRequest&gt;):\n  System.Quantity {\n    value: Sum((MME(prescriptions)) M return M.mme.value),\n    unit: 'mg/d'\n  }\n\ndefine function ProbableDaysInRange(Orders List&lt;MedicationRequest&gt;, daysPast Integer, numDaysInDaysPast Integer):\n  Orders orders\n    let\n      frequency: orders.dosageInstruction[0].timing.repeat.frequency.value,\n      period: orders.dosageInstruction[0].timing.repeat.period.value,\n      periodDays: GetPeriodDays(orders.dosageInstruction[0].timing.repeat.periodUnit.value),\n      dosesPerDay:\n        if (frequency / (period * periodDays)) &gt;= 1.0\n        then 1.0\n        else frequency / (period * periodDays),\n      repeat: orders.dispenseRequest.numberOfRepeatsAllowed.value,\n      supplyDuration: GetDurationInDays(orders.dispenseRequest.expectedSupplyDuration),\n      validityPeriod: days between orders.dispenseRequest.validityPeriod.\"start\".value and Today(),\n      endDifference:\n        if orders.dispenseRequest.validityPeriod.\"end\".value &lt; Today()\n        then days between orders.dispenseRequest.validityPeriod.\"end\".value and Today()\n        else 0\n    return\n      if (repeat * supplyDuration) &lt; numDaysInDaysPast then false\n      else\n        (dosesPerDay * ((repeat * supplyDuration) / validityPeriod) * (daysPast - endDifference)) &gt;= numDaysInDaysPast\n\ndefine function GetPeriodDays(value System.String): // returns Decimal:\n  case\n    when value = 'a' then 365.0\n    when value = 'mo' then 30.0\n    when value = 'h' then 1.0/24.0\n    when value = 'min' then 1.0/24.0*60.0\n    when value = 's' then 1.0/24.0*60.0*60.0\n    when value = 'ms' then 1.0/24.0*60.0*60.0*1000.0\n    else 1.0\n  end\n\ndefine function GetDurationInDays(value FHIR.Duration): // returns Decimal:\n    case\n      when StartsWith(value.unit.value, 'a') then value.value.value * 365.0\n      when StartsWith(value.unit.value, 'mo') then value.value.value * 30.0\n      when StartsWith(value.unit.value, 'wk') then value.value.value * 7.0\n      when StartsWith(value.unit.value, 'd') then value.value.value\n      when StartsWith(value.unit.value, 'h') then value.value.value / 24.0\n      when StartsWith(value.unit.value, 'min') then value.value.value / 60.0 / 24.0\n      when StartsWith(value.unit.value, 's') then value.value.value / 60.0 / 60.0 / 24.0\n      when StartsWith(value.unit.value, 'ms') then value.value.value / 60.0 / 60.0 / 24.0 / 1000.0\n      else Message(1000, true, 'Undefined', 'Error', 'Unsupported duration unit')\n    end\n\ndefine function GetIngredient(rxNormCode Code):\n  OMTKLogic.GetIngredients(rxNormCode).ingredientName\n\ndefine function GetIngredients(rxNormCodes List&lt;Code&gt;):\n  rxNormCodes rnc return GetIngredient(rnc)\n\ndefine function GetMedicationNames(medications List&lt;MedicationRequest&gt;):\n  medications M\n    return OMTKLogic.GetIngredients(ToRxNormCode(M.medication.coding)).rxNormCode.display\n\n/*\n*  Conversion Functions\n*/\ndefine function CodeableConceptsToString(concepts List&lt;FHIR.CodeableConcept&gt;):\n  concepts c return CodeableConceptToString(c)\n\n\ndefine function CodingToString(coding FHIR.Coding):\n  if (coding is null)\n  then null\n  else\n    'Code {' &amp;\n      'code: ' &amp; coding.code &amp;\n      'system: ' &amp; coding.system &amp;\n      'version: ' &amp; coding.version &amp;\n      'display: ' &amp; coding.display &amp;\n    '}'\n\ndefine function CodeableConceptToString(concept FHIR.CodeableConcept):\n  if (concept is null or concept.coding is null)\n  then null\n  else\n    'CodeableConcept {' &amp;\n      'Coding: [' &amp;\n        Combine(concept.coding Coding return CodingToString(Coding), ',')\n      &amp; ']'\n    &amp; '}'\n\ndefine function ToCode(coding FHIR.Coding):\n  System.Code {\n    code: coding.code.value,\n    system: coding.system.value,\n    version: coding.version.value,\n    display: coding.display.value\n  }\n\ndefine function ToCodes(coding List&lt;FHIR.Coding&gt;):\n  coding c return ToCode(c)\n\ndefine function ToRxNormCode(coding List&lt;FHIR.Coding&gt;):\n  singleton from (\n    coding C where C.system = 'http://www.nlm.nih.gov/research/umls/rxnorm'\n  )\n\ndefine function ToQuantity(quantity FHIR.Quantity):\n  System.Quantity { value: quantity.value.value, unit: quantity.unit.value }\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "version": "0.1.0",
  "name": "OpioidCDS_Common",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "Library/fhirhelpers"
    },
    {
      "type": "depends-on",
      "resource": "Library/omtklogic"
    }
  ],
  "dataRequirement": [
    {
      "type": "MedicationRequest",
      "codeFilter": [
        {
          "path": "medication",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-with-ambulatory-misuse-potential"
        }
      ]
    },
    {
      "type": "MedicationRequest",
      "codeFilter": [
        {
          "path": "medication",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/benzodiazepines"
        }
      ]
    },
    {
      "type": "MedicationRequest",
      "codeFilter": [
        {
          "path": "medication",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/naloxone"
        }
      ]
    },
    {
      "type": "MedicationRequest",
      "codeFilter": [
        {
          "path": "medication",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-with-ambulatory-misuse-potential"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing-enum"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions-enum"
        }
      ]
    },
    {
      "type": "Procedure",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
        }
      ]
    },
    {
      "type": "ServiceRequest",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding"
        }
      ]
    },
    {
      "type": "Encounter"
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}