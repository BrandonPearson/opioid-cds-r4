<Library xmlns="http://hl7.org/fhir">
   <id value="opioidcds-common"/>
   <url value="http://fhir.org/guides/cdc/opioid-cds/Library/opioidcds-common"/>
   <identifier>
      <use value="official"/>
      <value value="OpioidCDS_Common"/>
   </identifier>
   <version value="0.1.0"/>
   <name value="Library - Common Logic"/>
   <title value="Opioid CDS Common Logic"/>
   <status value="active"/>
   <experimental value="false"/>
   <type>
      <coding>
         <system value="http://hl7.org/fhir/library-type"/>
         <code value="logic-library"/>
         <display value="Logic Library"/>
      </coding>
   </type>
   <date value="2018-03-25T13:49:09-06:00"/>
   <publisher value="Centers for Disease Control and Prevention (CDC)"/>
   <description value="Common Opioid Decision Support Logic for use in implementing CDC Opioid Prescribing Guidelines."/>
   <purpose value="This library contains common logic across recommendations including MME calculations, conversions, and looking up codes in valuesets."/>
   <usage value="This library is used for decision support for opioid guideline recommendations when applying PlanDefinitions."/>
   <useContext>
      <code>
         <system value="http://hl7.org/fhir/usage-context-type"/>
         <code value="focus"/>
         <display value="Clinical Focus"/>
      </code>
      <valueCodeableConcept>
         <coding>
            <system value="http://snomed.info/sct"/>
            <code value="182888003"/>
            <display value="Medication requested (situation)"/>
         </coding>
      </valueCodeableConcept>
   </useContext>
   <useContext>
      <code>
         <system value="http://hl7.org/fhir/usage-context-type"/>
         <code value="focus"/>
         <display value="Clinical Focus"/>
      </code>
      <valueCodeableConcept>
         <coding>
            <system value="http://snomed.info/sct"/>
            <code value="82423001"/>
            <display value="Chronic pain (finding)"/>
         </coding>
      </valueCodeableConcept>
   </useContext>
   <jurisdiction>
      <coding>
         <system value="urn:iso:std:iso:3166"/>
         <code value="US"/>
         <display value="United States of America"/>
      </coding>
   </jurisdiction>
   <topic>
      <text value="Opioid Prescribing"/>
   </topic>
   <contributor>
      <type value="author"/>
      <name value="Kensaku Kawamoto, MD, PhD, MHS"/>
   </contributor>
   <contributor>
      <type value="author"/>
      <name value="Bryn Rhodes"/>
   </contributor>
   <contributor>
      <type value="author"/>
      <name value="Floyd Eisenberg, MD, MPH"/>
   </contributor>
   <contributor>
      <type value="author"/>
      <name value="Robert McClure, MD, MPH"/>
   </contributor>
   <copyright value="Â© CDC 2016+."/>
   <relatedArtifact>
      <type value="documentation"/>
      <display value="CDC guideline for prescribing opioids for chronic pain"/>
      <url value="https://www.cdc.gov/mmwr/volumes/65/rr/rr6501e1.htm?CDC_AA_refVal=https%3A%2F%2Fwww.cdc.gov%2Fmmwr%2Fvolumes%2F65%2Frr%2Frr6501e1er.htm"/>
   </relatedArtifact>
   <relatedArtifact>
      <type value="depends-on"/>
      <resource>
         <reference value="Library/omtk-logic-0.0.1"/>
      </resource>
   </relatedArtifact>
   <relatedArtifact>
      <type value="documentation"/>
      <display value="MME Conversion Tables"/>
      <url value="https://www.cdc.gov/drugoverdose/pdf/calculating_total_daily_dose-a.pdf"/>
   </relatedArtifact>
   <dataRequirement>
      <type value="MedicationRequest"/>
      <codeFilter>
         <path value="medicationCodeableConcept"/>
         <valueSetString value="Ambulatory Abuse Potential Opioids"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="MedicationRequest"/>
      <codeFilter>
         <path value="medicationCodeableConcept"/>
         <valueSetString value="Ambulatory Abuse Potential Opioids"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="MedicationRequest"/>
      <codeFilter>
         <path value="medicationCodeableConcept"/>
         <valueSetString value="Benzodiazepines"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="MedicationRequest"/>
      <codeFilter>
         <path value="medicationCodeableConcept"/>
         <valueSetString value="Naloxone"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="Condition"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="End of Life Conditions"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="Condition"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="Limited Life Expectancy Conditions"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="ReferralRequest"/>
      <codeFilter>
         <path value="type"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="Procedure"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="Hospice Procedure Codes"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="ProcedureRequest"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="Hospice Procedure Codes"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="Observation"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="Hospice Finding Codes"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="Encounter"/>
   </dataRequirement>
   <dataRequirement>
      <type value="MedicationAdministration"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="End Of Life Opioids"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="MedicationDispense"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="End Of Life Opioids"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="MedicationRequest"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="End Of Life Opioids"/>
      </codeFilter>
   </dataRequirement>
   <dataRequirement>
      <type value="MedicationStatement"/>
      <codeFilter>
         <path value="code"/>
         <valueSetString value="End Of Life Opioids"/>
      </codeFilter>
   </dataRequirement>
   <content>
      <contentType value="application/elm+xml"/>
      <data value=""/>
   </content>
</Library>
