<Library xmlns="http://hl7.org/fhir">
    <id value="opioidcds-recommendation-10"/>
    <identifier>
        <use value="official"/>
        <value value="OpioidCDS_REC_10"/>
    </identifier>
    <version value="0.1.0"/>
    <name value="Library - Logic for Recommendation #10"/>
    <title value="Opioid CDS Logic for recommendation #10"/>
    <status value="active"/>
    <experimental value="false"/>
    <type>
        <coding>
            <system value="http://hl7.org/fhir/library-type"/>
            <code value="logic-library"/>
            <display value="Logic Library"/>
        </coding>
    </type>
    <date value="2018-04-15T13:49:09-06:00"/>
    <publisher value="Centers for Disease Control and Prevention (CDC)"/>
    <description value="Opioid decision support logic to evaluate whether the patient has had a urine screening in the past 12 months and provide analysis."/>
    <purpose value="The purpose of this library is to determine whether the patient has had a urine screening in the past 12 months. Is so, then check the results for missing opioids that are prescribed, present opioids that aren't prescribed or present illicit drugs."/>
    <usage value="This library is used to notify the prescriber/user whether the patient has had a urine screening in the past 12 months and to provide analysis if true."/>
    <useContext>
        <code>
            <system value="http://hl7.org/fhir/usage-context-type"/>
            <code value="focus"/>
            <display value="Clinical Focus"/>
        </code>
        <valueCodeableConcept>
            <coding>
                <system value="http://snomed.info/sct"/>
                <code value="182888003"/>
                <display value="Medication requested (situation)"/>
            </coding>
        </valueCodeableConcept>
    </useContext>
    <useContext>
        <code>
            <system value="http://hl7.org/fhir/usage-context-type"/>
            <code value="focus"/>
            <display value="Clinical Focus"/>
        </code>
        <valueCodeableConcept>
            <coding>
                <system value="http://snomed.info/sct"/>
                <code value="82423001"/>
                <display value="Chronic pain (finding)"/>
            </coding>
        </valueCodeableConcept>
    </useContext>
    <jurisdiction>
        <coding>
            <system value="urn:iso:std:iso:3166"/>
            <code value="US"/>
            <display value="United States of America"/>
        </coding>
    </jurisdiction>
    <topic>
        <text value="Opioid Prescribing"/>
    </topic>
    <contributor>
        <type value="author"/>
        <name value="Kensaku Kawamoto, MD, PhD, MHS"/>
    </contributor>
    <contributor>
        <type value="author"/>
        <name value="Bryn Rhodes"/>
    </contributor>
    <contributor>
        <type value="author"/>
        <name value="Floyd Eisenberg, MD, MPH"/>
    </contributor>
    <contributor>
        <type value="author"/>
        <name value="Robert McClure, MD, MPH"/>
    </contributor>
    <copyright value="Â© CDC 2016+."/>
    <relatedArtifact>
        <type value="documentation"/>
        <display value="CDC guideline for prescribing opioids for chronic pain"/>
        <url value="https://guidelines.gov/summaries/summary/50153/cdc-guideline-for-prescribing-opioids-for-chronic-pain---united-states-2016#420"/>
    </relatedArtifact>
    <relatedArtifact>
        <type value="depends-on"/>
        <resource>
            <reference value="Library/opioidcds-common"/>
        </resource>
    </relatedArtifact>
    <dataRequirement>
        <type value="MedicationRequest"/>
        <codeFilter>
            <path value="medicationCodeableConcept"/>
            <valueSetString value="End Of Life Opioids"/>
        </codeFilter>
    </dataRequirement>
    <dataRequirement>
        <type value="MedicationRequest"/>
        <codeFilter>
            <path value="medicationCodeableConcept"/>
            <valueSetString value="Ambulatory Abuse Potential Opioids"/>
        </codeFilter>
    </dataRequirement>
    <dataRequirement>
        <type value="Observation"/>
        <codeFilter>
            <path value="combo-code"/>
            <valueSetString value="Illicit Drug Screening"/>
        </codeFilter>
    </dataRequirement>
    <dataRequirement>
        <type value="Observation"/>
        <codeFilter>
            <path value="combo-code"/>
            <valueSetString value="Opioid Drug Screening"/>
        </codeFilter>
    </dataRequirement>
    <content>
        <contentType value="application/elm+xml"/>
        <data value=""/>
        <title value="DSTU2 library logic"/>
    </content>
    <content>
        <contentType value="application/elm+xml"/>
        <data value=""/>
        <title value="STU3 library logic"/>
    </content>
</Library>
